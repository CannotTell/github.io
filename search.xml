<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flask Sqlalchemy Postgres Update JSONB</title>
    <url>/github.io/2020/05/24/flask-orm-bugs/</url>
    <content><![CDATA[<h1 id="Flask-Sqlalchemy"><a href="#Flask-Sqlalchemy" class="headerlink" title="Flask Sqlalchemy"></a>Flask Sqlalchemy</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>环境 Flask Sqlalchemy ORM，数据库Postgres9.6</p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用flask Sqlalchemy的ORM更新JSONB时无效，<a href="https://stackoverflow.com/questions/42559434/updates-to-json-field-dont-persist-to-db" target="_blank" rel="noopener">同问题链接</a><br>根据问题描述是由于 Postgres &lt; 9.4 版本问题，但是我的版本为9.6也出现同样问题，用此方法解决:<br>用flag_modified告诉Sqlalchemy需要更新JSON</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm.attributes <span class="keyword">import</span> flag_modified</span></pre></td></tr><tr><td class="code"><pre><span class="line">model.data[<span class="string">'key'</span>] = <span class="string">'New value'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">flag_modified(model, <span class="string">"data"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">session.add(model)</span></pre></td></tr><tr><td class="code"><pre><span class="line">session.commit()</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title>翻越GFW Version3</title>
    <url>/github.io/2020/05/24/%E7%BF%BB%E8%B6%8AGFW-V3/</url>
    <content><![CDATA[<h1 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>有VPS</p>
</blockquote>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>首先得有一个VPS，我这里用的是国际版的 <a href="https://portal.azure.com" target="_blank" rel="noopener">Azure</a>。其他的也行，反正能在外面建虚拟机就行。</p>
<p>然后在Azure上创建虚拟机，怎么创建我就不说了。我现在虚机版本是<strong>Ubuntu 16.04 LTS</strong></p>
<h2 id="进入正题配置"><a href="#进入正题配置" class="headerlink" title="进入正题配置"></a>进入正题配置</h2><p><a href="https://www.v2ray.com/chapter_00/start.html" target="_blank" rel="noopener">官方文档</a></p>
<h1 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd                                     <span class="comment"># 设置root 密码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">su                                              <span class="comment"># 进入root</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh) <span class="comment">#安装v2ray</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">vim /etc/v2ray/config.json                      <span class="comment">#编辑文件来配置你需要的代理方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo pip install shadowsocks</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo systemctl start v2ray                      <span class="comment"># 启动</span></span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>V2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Nginx+uwsgi+django出现的问题</title>
    <url>/github.io/2018/05/22/%E9%85%8D%E7%BD%AENginx+uwsgi+django%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Nginx-uwsgi-django"><a href="#Nginx-uwsgi-django" class="headerlink" title="Nginx+uwsgi+django"></a>Nginx+uwsgi+django</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>配置网站后出现的nginx Permission denied问题</p>
</blockquote>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>按照这个<a href="https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04" target="_blank" rel="noopener">步骤</a>配置安装环境， 但是到最后nginx出现Permission denied问题。</p>
<h1 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line">ps -ef | grep uwsgi</span></pre></td></tr></table></figure>
<p>查看2个进程的用户，如果用户权限不对就会出现这个错误，我就是这个问题，我的nginx是nobody进程，进入到nginx.cnf中把user nobody; 改成 user root; 如果没有就自己添加，然后重启nginx就好了</p>
<h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><p>网上有说是selinux引起的，直接关闭就行了，我没有遇到，我也不知道好不好使</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的@classmethod和@staticmethod</title>
    <url>/github.io/2017/12/20/Python%E7%9A%84@classmethod%E5%92%8C@staticmethod/</url>
    <content><![CDATA[<h1 id="Python的-classmethod和-staticmethod"><a href="#Python的-classmethod和-staticmethod" class="headerlink" title="Python的@classmethod和@staticmethod"></a>Python的@classmethod和@staticmethod</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<p>一般我们使用某个类的方法时是需要实例化这个类才能用的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'a'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">A().a</span></pre></td></tr></table></figure>
<p>而@classmethod和@staticmethod则可以不实例化类直接调用改类的方法 A.a()来调用，有利于代码的组织和整洁，可以把属于这个类的方法放进去而又不需要实例化就可以使用。<br><strong>我们具体看下他们的区别</strong></p>
<h2 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod</h2><p>@staticmenthod的函数不需要对象的self和类的cls参数，就和普通函数一样，只不过是放在了类里面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @staticmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'x'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">A.x()</span></pre></td></tr></table></figure>
<p>调用也和普通函数一样非常好理解，<strong>这种情况就是我们想用这个方法的同时又不想实例化类和破坏代码组织机构的时候可以用到。</strong></p>
<h2 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h2><p>@classmethod比上面的稍微复杂点,它的函数需要传入cls类参数，也就是可以用来调用类的属性，方法，实例等。我们知道Python是不支持函数重载的，我们用这个方法可以某种程度上模仿重载, 比如当A实例化的时候是需要以A(x,y)的形势进行，如何我想再加一种类型，这里可以用到@classmethod</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.a = a</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.b = b</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span><span class="params">(cls, y)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> cls(y, y)</span></pre></td></tr></table></figure>
<p><strong>当然对Python来说重载可能意义不大，我们只是用这个方式来理解@classmethod</strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Down掉后的一些问题</title>
    <url>/github.io/2017/12/07/Nginx%20Down%E6%8E%89%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Nginx-Down掉后的一些问题"><a href="#Nginx-Down掉后的一些问题" class="headerlink" title="Nginx Down掉后的一些问题"></a>Nginx Down掉后的一些问题</h1><blockquote>
<p>错误日志</p>
</blockquote>
<h2 id="Nginx-Down掉后重启不来"><a href="#Nginx-Down掉后重启不来" class="headerlink" title="Nginx Down掉后重启不来"></a>Nginx Down掉后重启不来</h2><p>朋友的一个小网站让我帮忙重启下，重启Nginx后发现典型的端口被占了，估计Nginx Down掉后端口就被占用了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting nginx: nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span></pre></td></tr><tr><td class="code"><pre><span class="line">nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span></pre></td></tr><tr><td class="code"><pre><span class="line">nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span></pre></td></tr><tr><td class="code"><pre><span class="line">nginx: [emerg] <span class="built_in">bind</span>() to 0.0.0.0:80 failed (98: Address already <span class="keyword">in</span> use)</span></pre></td></tr><tr><td class="code"><pre><span class="line">nginx: [emerg] still could not <span class="built_in">bind</span>()</span></pre></td></tr></table></figure>
<p>OK，看一下被谁占用了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ntpl</span></pre></td></tr></table></figure>
<p>一运行发现被httpd给占用了，好吧直接 kill -9 PID掉，发现不行杀不掉，杀掉立马重启，估计是有守护进程什么的吧，好吧算你厉害我也不管了直接killall httpd直接杀光，最后再重启Nginx OK了</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python元类</title>
    <url>/github.io/2017/11/03/Python%E5%85%83%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Python元类"><a href="#Python元类" class="headerlink" title="Python元类"></a>Python元类</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<h2 id="元类（Metaclass）"><a href="#元类（Metaclass）" class="headerlink" title="元类（Metaclass）"></a>元类（Metaclass）</h2><p>我觉得这个翻译还是很到位的，顾名思义，元：就是精华， 根本，起始的意思。所以元类根据字面意思就是最原始的类喽。我们知道在Python里一切皆对象，int、str、我们用class定于的类都是对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义类A</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 自定义类D</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    D = type(<span class="string">'D'</span>, (object, ), &#123;&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = A()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    b = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c = <span class="string">'str'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    d = D()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(type(a))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(type(b))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(type(c))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(type(d))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;class '__main__.A'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;class 'int'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;class 'str'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;class '__main__.D'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>type我们最常用的就是累查看数据类型，其实它也可以用类创建类，当她传入3个参数时就可以创建类了。</p>
<ul>
<li>第一个参数为字符串，类名</li>
<li>第二个为元组，需要继承的类</li>
<li>第三个为字典，类方法的定义</li>
</ul>
<p><strong>我们可以说type是一个元类，可以用来创建类的类</strong></p>
<h2 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a><strong>metaclass</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr></table></figure>
<p>除了type， <strong>metaclass</strong>也是可以用类创建类的，当我们用自定义类A来实例化的时候,Pyhton会去查看class A中有没有<strong>metaclass</strong>属性，如果有则按照<strong>metaclass</strong>里的定义来创建类， 如果没有，则会从模块级别去寻找，如果还没有就会从A的父类去寻找，以此类推如果还是没有则就用type来创建A，所以<strong>metaclass</strong>主要可以用来：</p>
<ul>
<li>拦截类的创建</li>
<li>修改类的定义</li>
<li>返回修改后的类</li>
</ul>
<blockquote>
<p>元类被称之为Python的黑魔法，不过现实中99%的工程都不会用到元类，但是我们还是要了解其原理，Django的ORM就是用元类来实现的，抽空再研究下。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python单例模式</title>
    <url>/github.io/2017/10/29/Python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Python单例模式"><a href="#Python单例模式" class="headerlink" title="Python单例模式"></a>Python单例模式</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<p>我们看下Python中的几种单例模式写法，还是蛮有收益的</p>
<h2 id="元类-call函数实现"><a href="#元类-call函数实现" class="headerlink" title="元类 + call函数实现"></a>元类 + <strong>call</strong>函数实现</h2><p>首先我们看下<strong>call</strong>函数具体用法， <strong>call</strong>就是将对象的实例化变成可调用函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'test'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = A()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a() <span class="comment"># a()就是等于a.__call__()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(callable(a))</span></pre></td></tr></table></figure>
<p>OK，是不是很容易理解</p>
<p><strong>我们再看下元类的单例模式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        cls.__instance = <span class="literal">None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        super().__init__(*args, **kwargs)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cls.__instance = super().__call__(*args, **kwargs)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> cls.__instance</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> cls.__instance</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(metaclass=Singleton)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, i)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.i = i</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = A(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    b = A(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a.i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(b.i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a <span class="keyword">is</span> b)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<blockquote>
<p>期初没看懂这段代码，对其调用顺序很不理解，后来发现是没理解元类的概念</p>
</blockquote>
<p><strong>我们看下这个黑魔法是怎么玩的：</strong>我们知道<strong>call</strong>是能把类的实例变成可调用对象，然而Python里一切皆对象，我们之前讲元类的时候说到type()其实是可以创建对象的，这里type是一个实例对象，那么它的type()其实就是调用其元类的<strong>call</strong>函数，这里也一样A的元类为Singleton,当A()时候其实是调用Singleton的<strong>call</strong>函数，所以我们就可以控制其实例的生成了，当我们创建实例的时候其实调用type.<strong>call</strong>()就相当于用type()来创建实例了。<strong>这也是用来理解元类和<strong>call</strong>函数的好例子</strong></p>
<ul>
<li><strong>优点：</strong>是真正的类，而且会自动覆盖继承</li>
<li><strong>缺点：</strong>可能开始理解会比较难吧，对元类要理解透彻</li>
</ul>
<h2 id="装饰器实现"><a href="#装饰器实现" class="headerlink" title="装饰器实现"></a>装饰器实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    instances = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span><span class="params">(*args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            instances[cls] = cls(*args, **kwargs)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> instances[cls]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> _singleton</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@singleton</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.a = a</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a1 = A(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a2 = A(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a1.a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a2.a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(type(A))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a1 <span class="keyword">is</span> a2)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;class 'function'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>看代码很好理解，但是装饰器这里有个问题，type(A)的时候显示是function，所以这里装饰本身返回的是一个方法，如果你需要用查看类的方法属性什么的就麻烦了。</p>
<ul>
<li><strong>优点：</strong>很直观，pythonic，很切面的编程模式，而且python官方的单例也是用装饰器实现的</li>
<li><strong>缺点：</strong>就是其本身变成了一个方法，而不是类，无法用一些类的方法</li>
</ul>
<h2 id="基类实现"><a href="#基类实现" class="headerlink" title="基类实现"></a>基类实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    _instance = <span class="literal">None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(cls._instance, cls):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cls._instance = object.__new__(cls, *args, **kwargs)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> cls._instance</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Singleton)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a1 = A()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a2 = A()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a1 <span class="keyword">is</span> a2)</span></pre></td></tr></table></figure>
<p>这种方法有个<strong>缺点</strong>，如果子类重写了<strong>new</strong>就会失去单例效果了，而且我们一般不提倡自己去写<strong>new</strong>函数。</p>
<h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><p>Python的模块本身就是单例模式，在第一次导入时会生产.pyc文件，当第二次导入时就会直接加载.pyc文件了，不会再执行模块代码了。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的内存回收</title>
    <url>/github.io/2017/10/23/Python%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h1 id="Python的内存回收"><a href="#Python的内存回收" class="headerlink" title="Python的内存回收"></a>Python的内存回收</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<p>一般高级语言都会有自己的垃圾回收机制，我们看一下Python是怎么个机制呢。<br><strong>Python主要有2种机制，以引用计数机制为主，引用环检测（Detecting Reference Cycles，网上大多数喜欢翻译标记-清除和孤立引用环，我也不知道是不是一个东西）和分代回收为辅</strong><br>分代回收是用来回收和释放内存的，引用环检测是标记垃圾对象的，所以分代回收是建立在引用环检测的基础上的，它俩和起来为一种辅助机制。</p>
<h2 id="引用计数法（Reference-Counting）"><a href="#引用计数法（Reference-Counting）" class="headerlink" title="引用计数法（Reference Counting）"></a>引用计数法（Reference Counting）</h2><p>这个顾名思义很好理解，而且很多变成语言都有用，原理：每个对象内部有一个字段用来维护该对象被引用的次数，当这个引用数为0时，说明这个对象已经没有被其他对象所引用就可以被释放回收了。<br>getrefcount()对象的引用次数，当传递某个引用给getrefcount()函数时，参数会创建一个临时的引用，所以getrefcount()得值永远会比期望的多1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> getrefcount</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.a = <span class="string">'test'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = A()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    b = a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(getrefcount(a))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">del</span> a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(getrefcount(b))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p><strong>当我们del某个引用时并不会立即释放内存，只是其引用次数减1罢了</strong><br>引用计数的好处</p>
<ul>
<li>就是实时性，一旦对象没有了引用就会被释放，内存利用率高，回收时间也被分摊到平时。<br>缺点</li>
<li>引用计数的维护还是很耗资源的</li>
<li>相互循环引用的情况无法用引用计数解决<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">l2 = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">l1.append(l2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">l2.append(l1)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 这种列表相互引用，其引用计数的值最少也为1，无法为0</span></span></pre></td></tr></table></figure>
<h2 id="引用环检测（Detecting-Reference-Cycles）"><a href="#引用环检测（Detecting-Reference-Cycles）" class="headerlink" title="引用环检测（Detecting Reference Cycles）"></a>引用环检测（Detecting Reference Cycles）</h2>当出现上面那种相互引用的情况下，引用计数是无法释放其内存的，所以Python内部用这套算法来检查这种情况。首先</li>
</ul>
<p>1.将所有待处理的对象都放到一个链表里去，一般叫（young list）<br>2.Python为每个引用对象创建一个其引用计数的副本，以方便用来更改而不影响其原本的引用计数。<br>3.将链表里对象的被引用对象的引用计数减1，所有的环都断了<br>4.讲引用计数为0的则为Unreachable对象，不为0的则为GC_REACHABLE，将列表一分2，标记可释放的垃圾对象。</p>
<h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>在程序里如果一个对象的存活周期越长则说明这个对象一直被引用，比较重要，一般不会被回收，所以利用这点Python减少对这种对象的检查来节省资源，于是就有了分代回收这个机制。<br>Python里将对象分为3个“时代”：0时代， 1时代，2时代。所有新分配内存的对象都先被分到0时代，也就是最年轻的。然后经过几次垃圾回收之后还没有被回收这则放到1时代中，以此类推。那什么时候进行分代回收呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gc.get_threshold() <span class="comment">#输出：(700, 10, 10)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 这个就是分代回收的条件，当然我们可以用set_threshold（）来自己定义</span></span></pre></td></tr></table></figure>
<p>这几个参数是什么意思呢：</p>
<ul>
<li>700：在程序运行过程中，分配内存的数量<strong>减去</strong>被释放内存的数量<strong>大于</strong>700时，垃圾回收开始</li>
<li>10：当0时代的对象内存回收次数已经大于10次的时候，1时代的对象开始内存回收，以此类推2时代开启垃圾回收需要10次1时代的垃圾回收次数</li>
</ul>
<h2 id="内存分配和回收的整个流程"><a href="#内存分配和回收的整个流程" class="headerlink" title="内存分配和回收的整个流程"></a>内存分配和回收的整个流程</h2><ul>
<li>1.当Python想要分配一个新对象时调用’_PyObject_GC_Malloc’方法为新对象分配内存，并将此对象添加到垃圾回收器第0代</li>
<li>2.检查分配对象数减去释放对象数是否大于700阀值，如果是，并将垃圾回收机制并没有运行，则调用’collect_generations’收集垃圾，否则对象正常分配内存</li>
<li>3.当’collect_generations’开始时它会计算何时开始回收，并检查特定条件是否满足，比如说，它检测到第0代已经回收了10了，所以要开始第1代的回收，它会把第0代和第1代合并成一块，然后调用’collect’开始回收</li>
<li>4.’collect’开始后运行引用环检测，区分需要回收和不需要回收的对象，将Unreachable对象回收释放，将GC_REACHABLE对象分配到第1代（或者第2代）,最后返回状态完成collect。</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的协程</title>
    <url>/github.io/2017/10/10/Python%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Python的协程"><a href="#Python的协程" class="headerlink" title="Python的协程"></a>Python的协程</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>协程（Coroutine），我们称为微线程。在Python中我们进行并发编程的时候我们会想到用多线程和多进程来实现，但是由于GIL多线程并不能很好的并发处理，它对处理与I/O密集型的操作能发挥点效率。然而对于这种操作我们还可以用Python的协程来处理，并且效率比多线程要好，因为协程本质上只是一个单线程，我们对比下优势</p>
<ul>
<li>开销：多线程的创建，线程之间的切换都需要系统开销，而协程则不需要</li>
<li>锁：多线程需要对资源加锁，协程因为是单线程不需要锁<br>单从上面2点协程的执行效率就高于多线程，而且线程越多，协程的优势就越明显</li>
</ul>
<p><strong>Python中对协程的支持是通过生成器（generator）来实现的</strong><br>我们用生成器来看下协程的金拱门案列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 金拱门生产者</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jingongmen</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = <span class="number">-1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    count = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        msg = <span class="keyword">yield</span> ret</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'生产汉堡&#123;&#125;'</span>.format(count))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = count</span></pre></td></tr><tr><td class="code"><pre><span class="line">        count += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_me</span><span class="params">(j)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 这个send（None）是用来启迪上面的生成器，如果直接send值过去会报错的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    j.send(<span class="literal">None</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'需要一个汉堡！'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        hanbao = j.send(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'汉堡&#123;&#125;收到'</span>.format(hanbao))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    j.close()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    j = jingongmen()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    _me(j)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡1收到</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡2收到</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡3收到</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡4收到</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡5收到</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>是不是很熟悉的栗子，这个效率就比线程高了，这是用生成器实现的协程</p>
<h2 id="asyncio标准库"><a href="#asyncio标准库" class="headerlink" title="asyncio标准库"></a>asyncio标准库</h2><p>Python3.5之前asyncio提供的是@asyncio.coroutine装饰器和yield from来实现异步的，3.5后用了新语法async和await,用asyncio写一下金拱门</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">jingongmen</span><span class="params">(_id, que)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'金拱门&#123;&#125;生产汉堡&#123;&#125;&#123;&#125;..'</span>.format(_id, _id, i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        msg = <span class="keyword">await</span> que.put(<span class="string">'&#123;&#125;&#123;&#125;'</span>.format(_id, i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> msg == <span class="number">-1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'金拱门&#123;&#125;结束'</span>.format(_id))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'汉堡&#123;&#125;&#123;&#125;完成'</span>.format(_id, i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">await</span> asyncio.sleep(random.randrange(<span class="number">1</span>, <span class="number">3</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'金拱门&#123;&#125;关闭..'</span>.format(_id))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">await</span> que.put(<span class="number">-1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">_me</span><span class="params">(_id, que)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'&#123;&#125;号我需要一个汉堡'</span>.format(_id))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        hanbao = <span class="keyword">await</span> que.get()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> hanbao == <span class="number">-1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'&#123;&#125;号我结束'</span>.format(_id))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'&#123;&#125;号拿到汉堡&#123;&#125;'</span>.format(_id, hanbao))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 只能在get（）后用的task_done()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        que.task_done()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">await</span> asyncio.sleep(random.randrange(<span class="number">1</span>, <span class="number">3</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    que = asyncio.Queue(<span class="number">50</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    loop = asyncio.get_event_loop()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    task_list = [jingongmen(<span class="number">1</span>, que), _me(<span class="number">1</span>, que), _me(<span class="number">2</span>, que), jingongmen(<span class="number">2</span>, que)]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    loop.run_until_complete(asyncio.wait(task_list))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    loop.close()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">2号我需要一个汉堡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">金拱门2生产汉堡20..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡20完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">金拱门1生产汉堡10..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡10完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1号我需要一个汉堡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1号拿到汉堡20</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">2号拿到汉堡10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1号我需要一个汉堡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">2号我需要一个汉堡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">金拱门1生产汉堡11..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡11完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">金拱门2生产汉堡21..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">汉堡21完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">1号拿到汉堡11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">2号拿到汉堡21</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">金拱门1生产汉堡12..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">。。。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p><strong>协程和线程、进程的区别是所有的阻塞调动都是程序自己控制的，而线程和进程是由系统来控制的。</strong>所有协程的操作还是有点难度的,这里介绍一个库<strong>gevent</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'run func1'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gevent.sleep(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'finish func1'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'run func2'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gevent.sleep(<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'finish func2'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gevent.joinall([gevent.spawn(func1),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    gevent.spawn(func2)])</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">run func1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">run func2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">finish func1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">finish func2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>这里我们用gevent.sleep来模拟阻塞，但实际上的阻塞的话还需要打上猴子补丁（Monkey Pathing）用来修改Python内部的代码来判读是否阻塞，从而它才可以自动给切换，但这个Monkey Pathing也是一个隐患，它可能会影响到你原来的Python运行代码。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的线程，进程和GIL</title>
    <url>/github.io/2017/09/23/Python%E7%9A%84%E7%BA%BF%E7%A8%8B%EF%BC%8C%E8%BF%9B%E7%A8%8B%E5%92%8CGIL/</url>
    <content><![CDATA[<h1 id="Python的线程，进程和GIL"><a href="#Python的线程，进程和GIL" class="headerlink" title="Python的线程，进程和GIL"></a>Python的线程，进程和GIL</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>我们先看下进程和线程的概念和一些基本的知识，GIL我们后面再说。<br>从我们电脑上的操作系统来说一个<strong>进程（Process）</strong>就是一个程序，但是我们电脑不可能只开一个程序，我在电脑上听歌的同时也可以用Word打字，这里的听歌软件和Word就是2个进程了，这就是多进程。那什么是线程呢？<br>同样我的听歌软件主要功能是播放歌曲，但是它的内部还会有很多小任务，比如同时加载歌词，下载歌曲，推荐歌曲等等，听歌软件的进程里的一个小任务我们叫做<strong>线程（Thread）</strong>，一个进程里一般会有多个线程，就是多线程了。</p>
<h3 id="关系和区别"><a href="#关系和区别" class="headerlink" title="关系和区别"></a>关系和区别</h3><ul>
<li>线程必须依赖在进程中，一个进程可以包括多个线程</li>
<li>资源是分配给进程的，同一进程下的线程都可以访问分配给此进程的资源（线程是共享内存，但进程不是）</li>
<li>进程的等级比线程高，所以创建和销毁销毁资源比线程大</li>
</ul>
<h3 id="Python里的特点"><a href="#Python里的特点" class="headerlink" title="Python里的特点"></a>Python里的特点</h3><p>由于GIL的原因多进程和多线程在Python是有局限性的（往下看）</p>
<ul>
<li>多进程适合处理CPU密集型</li>
<li>多线程适合处理I/O密集型</li>
</ul>
<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>Python里进程和多进程</p>
<h3 id="multiprocessing包"><a href="#multiprocessing包" class="headerlink" title="multiprocessing包"></a>multiprocessing包</h3><p>Python里提供了multiprocessing这个包来实现进程和多进程，非常好使，提供了子进程，进程通信，数据共享等功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(time_sleep, process_name)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'hello, My Process Name is &#123;&#125;'</span>.format(process_name))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    time.sleep(time_sleep)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 单进程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_process</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p = multiprocessing.Process(target=do_something, args=(<span class="number">1</span>, <span class="string">'process NO.1'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'process id:&#123;&#125;; process Name:&#123;&#125;; process is alive:&#123;&#125;'</span>.format(p.pid, p.name, p.is_alive()))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 多进程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_progress</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p = multiprocessing.Process(target=do_something, args=(<span class="number">1</span>, <span class="string">'process NO.&#123;&#125;'</span>.format(i)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">"The number of CPU is:"</span> + str(multiprocessing.cpu_count()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> multiprocessing.active_children():</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">"child p.name:&#123;&#125;; p.id:&#123;&#125;; p.is_alive:&#123;&#125;"</span>.format(j.name, j.pid, j.is_alive()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">"END!!!!!!!!!!!!!!!!!"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    single_process()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    multi_progress()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">单进程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">process id:10188; process Name:Process-1; process is alive:True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">hello, My Process Name is process NO.1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">多进程</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">The number of CPU is:4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">child p.name:Process-4; p.id:8972; p.is_alive:True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">child p.name:Process-2; p.id:6236; p.is_alive:True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">child p.name:Process-3; p.id:8336; p.is_alive:True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">child p.name:Process-1; p.id:15708; p.is_alive:True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">END!!!!!!!!!!!!!!!!!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">hello, My Process Name is process NO.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">hello, My Process Name is process NO.1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">hello, My Process Name is process NO.3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">hello, My Process Name is process NO.2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>这里主要看下如何创建进程和多进程。<br>daemon属性，如果在进程中设置daemon为True则主进程结束后子进程也随之结束不会再运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.daemon = <span class="literal">True</span></span></pre></td></tr></table></figure>
<h3 id="多进程通信"><a href="#多进程通信" class="headerlink" title="多进程通信"></a>多进程通信</h3><h4 id="multiprocessing-Pipe"><a href="#multiprocessing-Pipe" class="headerlink" title="multiprocessing.Pipe"></a>multiprocessing.Pipe</h4><p>Pipe就是管道模式，两端一读一写，所以只能是2个进程直接的交互</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pipe, Process</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 发送管道</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_pipe</span><span class="params">(pipe)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pipe.send(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'&#123;&#125; PID SEND &#123;&#125;'</span>.format(os.getpid(), i))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 接收管道</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_pipe</span><span class="params">(pipe)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = pipe.recv()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> ret <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'&#123;&#125; PID RECEIVE &#123;&#125;'</span>.format(os.getpid(), ret))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># The Pipe() function returns a pair of connection objects connected by a pipe which by default is duplex (two-way)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    rece_p, send_p = Pipe()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p1 = Process(target=send_pipe, args=(send_p,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p2 = Process(target=receive_pipe, args=(rece_p,))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p1.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p2.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">12204 PID SEND 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">15872 PID RECEIVE 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">12204 PID SEND 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">15872 PID RECEIVE 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">12204 PID SEND 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">15872 PID RECEIVE 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">12204 PID SEND 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">15872 PID RECEIVE 3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">12204 PID SEND 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">15872 PID RECEIVE 4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">12204 PID SEND 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">15872 PID RECEIVE 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">....</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<h4 id="multiprocessing-Queue"><a href="#multiprocessing-Queue" class="headerlink" title="multiprocessing.Queue"></a>multiprocessing.Queue</h4><p>这个是基于Pipe实现的，Queue也是一边put，一边get， 但是Queue可以是多个Process操作，可以多个Process Get，也可以多个Process Put.<br>Queue的put方法有两个可选参数：blocked和timeout，当blocked为True时并且timeout为正，put方法会阻塞timeout的时间直到Queue有空间，超出时间会抛出Queue.Full异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># put到Queue里，这里put了2种类型的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_queue</span><span class="params">(queue, put_type, sleep_time)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> put_type == <span class="string">'int'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            queue.put(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'&#123;&#125; PID PUT &#123;&#125;'</span>.format(os.getpid(), i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            time.sleep(sleep_time)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">elif</span> put_type == <span class="string">'str'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            val = <span class="string">'str&#123;&#125;'</span>.format(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            queue.put(val)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'&#123;&#125; PID PUT &#123;&#125;'</span>.format(os.getpid(), val))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            time.sleep(sleep_time)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 一直获取queue里面的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queue</span><span class="params">(queue)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        info = queue.get()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'&#123;&#125; PID GET &#123;&#125;'</span>.format(os.getpid(), info))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    queue = Queue(<span class="number">50</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 这里开2个进程放入数据，一个读取数据，因为Queue本身线程安全，无需担心共同访问资源问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p1 = Process(target=put_queue, args=(queue, <span class="string">'str'</span>, <span class="number">1</span>,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p2 = Process(target=put_queue, args=(queue, <span class="string">'int'</span>, <span class="number">2</span>,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p3 = Process(target=get_queue, args=(queue,))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p3.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p1.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p2.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    p3.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">4416 PID PUT 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">13380 PID PUT str0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">14172 PID GET 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">14172 PID GET str0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">13380 PID PUT str1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">14172 PID GET str1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">4416 PID PUT 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">14172 PID GET 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">13380 PID PUT str2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">14172 PID GET str2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">13380 PID PUT str3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">14172 PID GET str3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">....</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>Socket也是主要的进程通信之一，我们后面讲</p>
<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>multiprocessing中Pool可以创建用户指定的进程数，如果指定的进程已经满了，那么新的创建请求就会等待，等到池中的线程结束后再创建新的进来<br><strong>主要函数</strong></p>
<ul>
<li>apply_async(func[, args[, kwds[, callback]]])   非阻塞的</li>
<li>apply(func[, args[, kwds]])   是阻塞的（看下面代码输出结果区别）</li>
<li>close()      关闭pool，使其不在接受新的任务。</li>
<li>terminate()    结束工作进程，不在处理未完成的任务。</li>
<li>join()    主进程阻塞，等待子进程的退出， join方法要在close或terminate之后使用。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_pool</span><span class="params">(msg)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'PID:&#123;&#125; says &#123;&#125;'</span>.format(os.getpid(), msg))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    time.sleep(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pool = Pool(processes=<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        msg = <span class="string">'hello'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># pool.apply_async(test_pool, (msg,)) # 非阻塞</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        pool.apply(test_pool, (msg, ))  <span class="comment"># 阻塞</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'start..'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pool.close()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pool.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'done..'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">apply_async非阻塞输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">start..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29172 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29173 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29174 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29175 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29173 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">done..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">apply阻塞方法输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29183 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29184 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29185 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29186 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">PID:29183 says hello</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">test_pool done</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">start..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">done..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>再Python3里thread已经被废弃了，为了兼容性Python3将thread重命名为_thread， 但是我们一般都使用threading模块， threading模块比 _thread模块高级，推荐用threading模块</p>
<h3 id="创建多线程"><a href="#创建多线程" class="headerlink" title="创建多线程"></a>创建多线程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_thread</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    thread_name = threading.current_thread().name</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'Thread &#123;&#125; is running...'</span>.format(thread_name))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'Thread &#123;&#125; is print &#123;&#125;'</span>.format(thread_name, i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time.sleep(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'thread &#123;&#125; is end'</span>.format(thread_name))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'thread &#123;&#125; is start...'</span>.format(threading.current_thread().name))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1 = threading.Thread(target=test_thread, name=<span class="string">'test_thread1'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2 = threading.Thread(target=test_thread, name=<span class="string">'test_thread2'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'thread &#123;&#125; is finished'</span>.format(threading.current_thread().name))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">thread MainThread is start...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread1 is running...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread1 is print 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread2 is running...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread2 is print 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread1 is print 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread2 is print 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread1 is print 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread test_thread2 is print 2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">thread test_thread1 is end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">thread test_thread2 is end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">thread MainThread is finished</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>如果这里不用join方法，主线程是不会等待子线程结束后再结束，用join后主线程被子线程阻塞，直到子线程跑完后再结束</p>
<h3 id="锁（Lock）"><a href="#锁（Lock）" class="headerlink" title="锁（Lock）"></a>锁（Lock）</h3><p>线程和进程不一样，同一进程下的线程是共享资源的，不想进程有各自单独的资源，所以这里就有可能出现多个线程同时改变一个变量的问题，于是就加入了锁这个概念。<br>先看下不加锁的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">理论上这个total的值应该始终是0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 全局变量初始为0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">total = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_total</span><span class="params">(n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> total</span></pre></td></tr><tr><td class="code"><pre><span class="line">    total = total + n</span></pre></td></tr><tr><td class="code"><pre><span class="line">    total = total - n</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_times</span><span class="params">(n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        change_total(n)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1 = threading.Thread(target=run_times, args=(<span class="number">8</span>,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2 = threading.Thread(target=run_times, args=(<span class="number">2</span>,))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(total)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">我这里用了1000000次来循环，最后的结果每次都一样而且不为0，这就是出现没有同时修改参数的问题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>加入锁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">理论上这个total的值应该始终是0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 全局变量初始为0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">total = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">lock = threading.Lock()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_total</span><span class="params">(n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">global</span> total</span></pre></td></tr><tr><td class="code"><pre><span class="line">    total += n</span></pre></td></tr><tr><td class="code"><pre><span class="line">    total -= n</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_times</span><span class="params">(n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 获取锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.acquire()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            change_total(n)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">finally</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 释放锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.release()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1 = threading.Thread(target=run_times, args=(<span class="number">8</span>,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2 = threading.Thread(target=run_times, args=(<span class="number">2</span>,))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(total)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 哪个线程获取了锁就可以操作change_total()，记得操作完后释放</span></span></pre></td></tr></table></figure>
<h3 id="线程的消息队列（Queue）"><a href="#线程的消息队列（Queue）" class="headerlink" title="线程的消息队列（Queue）"></a>线程的消息队列（Queue）</h3><p><strong>注意这里的Queue和进程的Queue不是一个模块，这里的Queue是queue模块里的，不要弄混了,</strong>这个Queue同样是线程安全的，他内部已经帮我们加锁了，所以不用我们自己再写锁了<br>一些主要方法</p>
<ul>
<li>Queue()是FIFO（first in, first out）队列，叫先进先出</li>
<li>LifoQueue()是LIFO（last in，first out）队列,是后进先出</li>
<li>Queue.qsize()：返回消息队列的当前空间。返回的值不一定可靠。</li>
<li>Queue.empty()：判断消息队列是否为空，返回True或False。同样不可靠。</li>
<li>Queue.full()：类似上边，判断消息队列是否满</li>
</ul>
<p>这里看一个比较简单存粹的生产者消费者模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(put_que)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    i = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'put a &#123;&#125;'</span>.format(i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        put_que.put(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time.sleep(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i += <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(get_que)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'get a &#123;&#125;'</span>.format(get_que.get()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time.sleep(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q = Queue(<span class="number">10</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1 = Thread(target=producer, args=(q,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2 = Thread(target=consumer, args=(q,))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 设置主线程结束，子线程也结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.setDaemon(<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.setDaemon(<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    start_time = time.time()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (time.time() - start_time) &lt; <span class="number">30</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">continue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(t1.is_alive())</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(t2.is_alive())</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'finished...'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 很简单一个生产，一个消费，用queue队列已经可以完成了</span></span></pre></td></tr></table></figure>
<p><strong>但是上面的毕竟是比较存粹的，现实中不肯能是这么简单的模式。</strong>举个列子就叫我去金拱门买薯条吧，如果按照上面的代码就是金拱门一直在生产薯条，而我一直在等薯条生产完成，显然这是不现实的，最好是中间有一个通知机制让金拱门告诉我有薯条了，或者我需要薯条的时候金拱门再生产。<strong>这里我们就需要用到Event了</strong><br>这里的Event可以用来线程同步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jingongmeng</span><span class="params">(que, ev)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    i = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 等待需求通知</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ev.wait()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'生产汉堡&#123;&#125;'</span>.format(i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        que.put(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i += random.randint(<span class="number">1</span>, <span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 生产完后就停工</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ev.clear()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wo</span><span class="params">(que, ev)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 通知需要汉堡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ev.set()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'需要一个汉堡!'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'拿到一个汉堡&#123;&#125;'</span>.format(que.get()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sleep_time = random.randrange(<span class="number">2</span>, <span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'随机等待&#123;&#125;秒'</span>.format(sleep_time))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time.sleep(sleep_time)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'饱了！'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q = Queue(<span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ev = Event()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1 = Thread(target=jingongmeng, args=(q, ev,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2 = Thread(target=wo, args=(q, ev,))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'finished'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">拿到一个汉堡1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">随机等待4秒</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">拿到一个汉堡4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">随机等待4秒</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">拿到一个汉堡6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">随机等待3秒</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p><strong>这里的注意了，这里的Event可以唤起所有挂起的线程，无法区分，如果要唤起某个指定的线程的用Semaphore或Condition</strong></p>
<h4 id="Semaphore和Condition"><a href="#Semaphore和Condition" class="headerlink" title="Semaphore和Condition"></a>Semaphore和Condition</h4><p><strong>Semaphore 信号量对象</strong>类似于一个高级锁的机制，它的用法和锁几乎一样，有一点不同是它内置有个计数器。当调用Semaphore的acquire（）方法是计数器-1，调用release（）方法是计数器+1，计数器不小于0，当计数器为0时，acquire（）将阻塞，直到有线程调用release（）。也就是用这个锁允许我们自定义同时访问代码块的线程个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(resource)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    resource.acquire()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'&#123;&#125;获取锁,do something..'</span>.format(threading.currentThread().getName()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    time.sleep(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    resource.release()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'&#123;&#125;释放锁'</span>.format(threading.currentThread().getName()))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sema = threading.Semaphore(value=<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t = threading.Thread(target=func, args=(sema,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># t.join()  注意这里就不需要join了如果用了join会看不到我们想要的结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'end'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># ------------------------------------------------------------</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 上面是用acquire和release的方法来获得和释放，还有一种更方便的with方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(resource)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">with</span> resource:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'&#123;&#125;获取锁,do something..'</span>.format(threading.currentThread().getName()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time.sleep(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'&#123;&#125;释放锁'</span>.format(threading.currentThread().getName()))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 直接用with就不需要手动release</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-1获取锁,do something..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-2获取锁,do something..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-3获取锁,do something..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-2释放锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-3释放锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-4获取锁,do something..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-1释放锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">Thread-4释放锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>这里就会有同时3个线程访问func执行<br><strong>Condition条件变量</strong>他是一个高级的Lock和Event，除了Lock的acquire和release方法外还提供了wait和notify，前面的Event是一个一次性的事件，虽然我们可以用Event的clear（）方法来清除事件，但是这个是线程不安全的，很难保证清除事件和等待事件线程的执行顺序，如果我们要多次通知一个事件最好用Condition</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用Condition改良版的金拱门</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jingongmeng</span><span class="params">(que, con)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    i = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 确保我先提需求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 获得锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.acquire()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 等待客户订单</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.wait()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'生产汉堡&#123;&#125;'</span>.format(i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        time.sleep(<span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        que.put(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'通知我汉堡&#123;&#125;已完成'</span>.format(i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.notify()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i += random.randint(<span class="number">1</span>, <span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 释放锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.release()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wo</span><span class="params">(que, con)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 确保金拱门先进入等待状态</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    time.sleep(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 获得锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.acquire()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 通知金拱门要汉堡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.notify()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'需要一个汉堡!'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 等出汉堡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.wait()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'拿到一个汉堡&#123;&#125;'</span>.format(que.get()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        con.release()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'饱了！'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q = Queue(<span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    con = Condition()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1 = Thread(target=jingongmeng, args=(q, con,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2 = Thread(target=wo, args=(q, con,))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.setDaemon(<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t1.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t2.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'finished'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">通知我汉堡1已完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">拿到一个汉堡1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">通知我汉堡4已完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">拿到一个汉堡4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">需要一个汉堡!</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">生产汉堡5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">通知我汉堡5已完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">拿到一个汉堡5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">。。。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>threading里好像没有说线程池的存在，不过我们自己完全可以用queue来创建，但是不用这么麻烦标准库concurrent.futures给我们提供了线程池</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_url</span><span class="params">(url)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    u = urllib.request.urlopen(url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    data = u.read()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> data</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pool = ThreadPoolExecutor(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = pool.submit(fetch_url, <span class="string">'http://www.xxx.com'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    b = pool.submit(fetch_url, <span class="string">'http://www.xxxx.com'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'任务提交完成'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 查看任务是否完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a.done())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(b.done())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 打印结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(a.result())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(b.result())</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">任务提交完成</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<h2 id="Python的全局解释器锁（GIL）"><a href="#Python的全局解释器锁（GIL）" class="headerlink" title="Python的全局解释器锁（GIL）"></a>Python的全局解释器锁（GIL）</h2><blockquote>
<p>一个Python解释器进程内有一个主线程，以及多个用户程序的执行线程。即便使用多核心CPU平台，由于GIL的存在，也将禁止多线程的并行执行.Python解释器进程内的多线程是以协作多任务方式执行。当一个线程遇到I/O任务时，将释放GIL。计算密集型（CPU-bound）的线程在执行大约100次解释器的计步（ticks）时，将释放GIL。计步（ticks）可粗略看作Python虚拟机的指令。计步实际上与时间片长度无关。可以通过sys.setcheckinterval()设置计步长度。 —-维基百科的一些解释</p>
</blockquote>
<p>Python虽然有多线程但是由于这GIL它的多线程是无法并行的，在任意时刻只能允许一个Python线程执行，所以无法充分利用CPU多核的优势，但是当它遇到I/O密集型任务是会释放GIL锁，这也是Python多线程再I/O密集型任务上还有一些发挥余地。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础-深浅Copy</title>
    <url>/github.io/2017/09/01/Python%E5%9F%BA%E7%A1%80-%E6%B7%B1%E6%B5%85Copy/</url>
    <content><![CDATA[<h1 id="Python的深浅Copy"><a href="#Python的深浅Copy" class="headerlink" title="Python的深浅Copy"></a>Python的深浅Copy</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<p><strong>首先一个概念就是Python里一切皆对象</strong><br><strong>Python的可变类型和不可变类型</strong><br>不可变类型：str, int, tuple<br>可变类型 list, dic等</p>
<p>对于不可变类型 str, int 我们在赋值时其实是新new了一个内存给当前变量，其原地址的值是无法修改的<br>既然都是对象那一般的对象赋值都是对地址引用的复制，Python里的深浅Copy和多数语言差不多。<br>简单来说浅Copy就是永远只复制对象的一层，而深Copy是将对象的所有资源都复制一份。<br>看一下代码就一目了然了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">python 深浅copy区别代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># b和c分别深浅copy了a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">b = copy(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">c = deepcopy(a)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 看下各自id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(id(a))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(id(b))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(id(c))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 对a操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a.append(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">a[<span class="number">3</span>].append(<span class="string">'d'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">由此可见 浅copy就是对对象的最外层copy了，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">对内层对象还是引用原来的地址，</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">所以a的内层对象变化会影响倒b。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">但是对于c深copy来讲完全没有影响</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">4495287496</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">4495350600</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">4495349576</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">[1, 2, 3, ['a', 'b', 'c', 'd'], 4]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">[1, 2, 3, ['a', 'b', 'c', 'd']]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">[1, 2, 3, ['a', 'b', 'c']]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>深浅Copy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python迭代器，可迭代对象和生成器</title>
    <url>/github.io/2017/08/14/Python%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Python迭代器，可迭代对象和生成器"><a href="#Python迭代器，可迭代对象和生成器" class="headerlink" title="Python迭代器，可迭代对象和生成器"></a>Python迭代器，可迭代对象和生成器</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<p>我们来看一下Python的这些概念，我刚学的时候很懵逼，现在捋一捋，首先我们先来看一张图，我觉得这张图很好，帮助我理解这些概念。<br><img data-src="/github.io/imgs/relationships.png" alt=""></p>
<blockquote>
<p>这个图是摘自以为外国小哥的<a href="http://nvie.com/posts/iterators-vs-generators/" target="_blank" rel="noopener">BLOG</a></p>
</blockquote>
<h2 id="可迭代对象（Iterable）"><a href="#可迭代对象（Iterable）" class="headerlink" title="可迭代对象（Iterable）"></a>可迭代对象（Iterable）</h2><p>在Python里我们常用的list， set， dict这些类型就是一些典型的可迭代对象，它们都叫容器，这个很好理解，很多高级语言里都有容器这个概念，再简单的讲凡是能for…in…遍历的都是可迭代的,Python里可以用isinstance这个方法来看对象是否可迭代，我们来看点代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 里函数作为参数传递</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance([], Iterable))         <span class="comment"># True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance((), Iterable))         <span class="comment"># True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(&#123;&#125;, Iterable))         <span class="comment"># True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(<span class="string">'test'</span>, Iterable))     <span class="comment"># True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(<span class="number">1</span>, Iterable))          <span class="comment"># False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">只有int的时候才是False，Python里列表，字典，元组都是可迭代对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义可迭代的类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.list = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'test'</span>, <span class="number">1.3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> iter(self.list)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">m = MyClass()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(m, Iterable))          <span class="comment"># True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 实现__iter__方法就可以生成一个可迭代对象</span></span></pre></td></tr></table></figure>
<h2 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h2><p>我们先看下何为迭代器<strong>迭代器是指遵循迭代器协议（iterator protocol）的对象。</strong><br>首先迭代器是一个对象，而且必须遵循迭代协议，那什么是迭代协议</p>
<blockquote>
<p><strong>迭代器协议（iterator protocol)</strong>是指要实现对象的 <strong>iter()</strong>和<strong>next</strong>() 方法，其中，<strong>iter()</strong> 方法返回迭代器对象本身，<strong>next</strong>() 方法返回容器的下一个元素，在没有后续元素时抛出 StopIteration 异常。<br>很简单，只要实现对象的这个2个方法就是迭代器，我们继续用上面的代码来判断是否是迭代器。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否为迭代器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.list = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'test'</span>, <span class="number">1.3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> iter(self.list)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">m = MyClass()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(m, Iterator))          <span class="comment"># Flase</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">不出意外这里是False，因为我们还少实现一个方法, 下面代码修改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.list = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'test'</span>, <span class="number">1.3</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> iter(self.list)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.list[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">m = MyClass()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(m, Iterator))          <span class="comment"># True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(m, Iterable))          <span class="comment"># True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">这里也不出意外只要实现__next__()函数就变成迭代器了，我们回上去看图片就可以明白，只要是迭代器的就一定是可迭代对象，所以这里也是True。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">那我们那些list，dict怎么加next函数，怎么变成迭代器呢？这里直接用iter()这个函数就可以了，这个我们从最开始的图片上也有。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance([], Iterable))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(iter([]), Iterator))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance((), Iterable))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(iter(()), Iterator))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(&#123;&#125;, Iterable))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(iter(&#123;&#125;), Iterator))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(<span class="string">'test'</span>, Iterable))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(isinstance(iter(<span class="string">'test'</span>), Iterator))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 输出结果都是 True</span></span></pre></td></tr></table></figure>

<h2 id="生成器（Generator）"><a href="#生成器（Generator）" class="headerlink" title="生成器（Generator）"></a>生成器（Generator）</h2><p>当我们需要大量的数据的时候不可能讲数据全部加载到内存里去，电脑的内存肯定不允许的，这个时候就需要生成器了，生成器可以一边循环一边生成我们需要的数据，所以基本上不会很占内存。生成器是一种高级的迭代器，它的Next方法是懒加载，也就是只有需要的时候才会生产。<br>生成器创建的2种方法</p>
<ul>
<li>生成器表达式（与列表推导式类似，将列表推导式的[]换成（））</li>
<li>生成器函数（将函数中的return关键字用yield关键字代替的函数就是生成器函数）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表推导式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">l = [x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 生成器表达式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">g = (x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(l)</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(g)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;generator object &lt;genexpr&gt; at 0x102e2d780&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">g只能通过next（）函数或者for...in...返回数据，而不能直接输出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 生成器函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_yield</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">yield</span> j</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(test_yield())</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;generator object test_yield at 0x10e6357d8&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr></table></figure>
<p>下面对比一下用生成器和列表分别输出斐波那契数列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器版本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_fib</span><span class="params">(n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pre, cur = <span class="number">0</span>, <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        n -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">yield</span> cur</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pre, cur = cur, cur + pre</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 直接返回list版本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pre, cur = <span class="number">0</span>, <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    _list = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        n -= <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        _list.append(cur)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pre, cur = cur, cur + pre</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> _list</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 对比一下占用内存大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(sys.getsizeof(fib(<span class="number">1000</span>)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(sys.getsizeof(gen_fib(<span class="number">1000</span>)))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">9024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">88</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python装饰器</title>
    <url>/github.io/2017/08/02/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="Python的装饰器"><a href="#Python的装饰器" class="headerlink" title="Python的装饰器"></a>Python的装饰器</h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<p>首先Python的<strong>装饰器</strong>本质上就是一个函数，而Python里有个特点就是Python的函数可以作为参数传递到另一个函数去，可以看下下面的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 里函数作为参数传递</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arg</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'arg func'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(func)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    func()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(x(arg))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">arg func</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>这里的arg函数被作为参数传入到x函数里并调用执行。<br>有这种功能后我们的装饰器可以在不改变基础函数的条件下再给其添加额外功能，这种方式可以很好的运用到面向切面编程的需求上去：比如记录日志，事务操作，权限设置等各种场景。</p>
<h2 id="Python中简单装饰器的写法"><a href="#Python中简单装饰器的写法" class="headerlink" title="Python中简单装饰器的写法"></a>Python中简单装饰器的写法</h2><p>下面我们看下Python中简单的装饰器写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在my_func函数之前和之后加处理，record_log本身没有参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_log1</span><span class="params">(func)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*arg, **args)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'do log before'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        func(*arg, **args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'do log after'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> wrapper</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@record_log1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(x, y)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'my func &#123;0&#125;-&#123;1&#125;'</span>.format(x, y))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">do log before</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">my func 1-2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">do log after</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>这种是Python最简单的函数装饰器，装饰器本身没有任何参数，装饰器函数本身有参数的写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># record_log本身也有参数的写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_log2</span><span class="params">(type)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*arg, **args)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'do log before with &#123;&#125;'</span>.format(type))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            func(*arg, **args)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'do log after with &#123;&#125;'</span>.format(type))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> wrapper</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> decorator</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@record_log2('test')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">(x, y)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'my func &#123;0&#125;-&#123;1&#125;'</span>.format(x, y))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">do log before with test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">my func 1-2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">do log after with test</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>可以看出有参数不过是外面再加一层函数就好了，这是Python里最简单的写法，后面还有以类为装饰器的写法，我们待续吧</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的__init__和__new__</title>
    <url>/github.io/2017/07/22/Python%E7%9A%84__init__%E5%92%8C__new__/</url>
    <content><![CDATA[<h1 id="Python的init和new"><a href="#Python的init和new" class="headerlink" title="Python的init和new"></a>Python的<strong>init</strong>和<strong>new</strong></h1><blockquote>
<p>自己写写记记加深记忆系列</p>
</blockquote>
<h2 id="inti和new"><a href="#inti和new" class="headerlink" title="inti和new"></a><strong>inti</strong>和<strong>new</strong></h2><p>我们自己在写Python类的时候用的最多的就是<strong>init</strong>方法了，而<strong>new</strong>和<strong>call</strong>几乎没怎么用到，今天记一下他们的主要区别和应用场景,先看一下下面的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">__init__和__new__的区别</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># b和c分别深浅copy了a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'A Class init'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'A class new func'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> object.__new__(cls, *args, **kwargs)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(type(A()))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">A class new func</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">A Class init</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;class '__main__.A'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>这里从代码输出结果可以看出 new 方法是在init方法之前执行的，再从它函数的参数可以看出init方法传入的是一个self，也就是说在执行init方法的时候其实对象已经生成实体类了，这个self就是实体类，而new得参数是cls，也就是说new方法是用来生成实体类得，我再写一段代码测试下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里写的代码接着上面的 class A 的代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'B class new func'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> object.__new__(A, *args, **kwargs) <span class="comment"># 注意这里的cls我们换成A</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'B class init'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">print(type(B()))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">输出结果：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">B class new func</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;class '__main__.A'&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span></pre></td></tr></table></figure>
<p>这段代码可以看出，虽然我用了B（）但是B实体类的type还是A Class， 所以可以肯定new方法是用来生产对象实体类的，而init主要是用这个实体类来做一下初始化的操作</p>
<blockquote>
<p>一般情况下我们不会去重写<strong>new</strong>方法，主要还是用<strong>init</strong>来初始化类，但是<strong>new</strong>的主要功能是创建对象，这个时候和我们有一个著名的设计模式单例模式类似，所以它可以用来写单例模式，后面我们会记一下。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualenvwrapper的使用</title>
    <url>/github.io/2017/07/10/Virtualenvwrapper%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Virtualenvwrapper"><a href="#Virtualenvwrapper" class="headerlink" title="Virtualenvwrapper"></a>Virtualenvwrapper</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大家用Python写项目的时候都会用到virtualenv，一旦工程项目多了会发现很多工程用的库版本会不同，会导致很多麻烦，于是就有virtualenv，它可以在同一系统在创建不同的Python虚拟环境来隔绝不同的项目，但是virtualenv有个弱点就是无法统一管理环境，而Virtualenvwrapper弥补了这个缺点，下面就记录下我使用Virtualenvwrapper.</p>
</blockquote>
<h2 id="安装Virtualenvwrapper"><a href="#安装Virtualenvwrapper" class="headerlink" title="安装Virtualenvwrapper"></a>安装Virtualenvwrapper</h2><p>安装很简单，直接输入命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenvwrapper</span></pre></td></tr></table></figure>

<h2 id="设置virtualenvwrapper生产虚拟环境的目录"><a href="#设置virtualenvwrapper生产虚拟环境的目录" class="headerlink" title="设置virtualenvwrapper生产虚拟环境的目录"></a>设置virtualenvwrapper生产虚拟环境的目录</h2><p>先查找virtualenvwrapper.sh位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> virtualenvwrapper.sh</span></pre></td></tr></table></figure>
<p>我的目录显示/usr/local/bin/virtualenvwrapper.sh<br>然后编辑/Users/用户名/.bash_profile文件，在最后加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span></pre></td></tr></table></figure>
<h1 id="生效"><a href="#生效" class="headerlink" title="生效"></a>生效</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p> 创建名为test的虚拟环境<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv <span class="built_in">test</span></span></pre></td></tr></table></figure><br> 这个虚拟环境就会在$HOME/.virtualenvs目录下生产。<br> 创建后会自动进入虚拟环境，一切操作都如常</p>
<h2 id="一些常用的命令"><a href="#一些常用的命令" class="headerlink" title="一些常用的命令"></a>一些常用的命令</h2> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon               <span class="comment">#显示所有的虚拟环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">workon 虚拟环境名      <span class="comment">#进入到XXX虚拟环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deactivate           <span class="comment">#退出虚拟环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">rmvirtualenv         <span class="comment">#移除虚拟环境</span></span></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>更多的命令和使用请查看<a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank" rel="noopener">官方文档</a></p>
<blockquote>
<p><strong>重要：virtualenvwrapper只能管理python的各种不同版本的包并不能管理多版本python，不要弄错了。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Virtualenvwrapper</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask + WSGI + Nginx</title>
    <url>/github.io/2017/06/15/Flask%20+%20WSGI%20+%20Nginx/</url>
    <content><![CDATA[<h1 id="Flask-WSGI-Nginx部署"><a href="#Flask-WSGI-Nginx部署" class="headerlink" title="Flask + WSGI + Nginx部署"></a>Flask + WSGI + Nginx部署</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>自己用Flask写个小网站打算放到公网上试一下。</p>
</blockquote>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>自己在VPS上用的是Ubuntu系统，默认是python2.7，我Flask的项目用的是Python3，所以这里用pip就得用python3的pip,安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#用python3-pip安装模块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo python3 -m pip install xxx</span></pre></td></tr></table></figure>
<p>我看网上的部署教程都是用VirtualEvn的，但是我这里没有用，后续再用吧。<br>VirtualEvn的主要作用是解决依赖冲突问题，python版本比较多如果服务器上有多个python项目就可能造成依赖冲突的问题，所以就用虚拟环境给隔离开来，虽然我没用但这里还是记录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python3 -m pip install virtualenv	<span class="comment">#安装</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">virtualenv my_ven	<span class="comment">#创建虚拟环境目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> my_ven/bin/activate <span class="comment">#激活虚拟环境</span></span></pre></td></tr></table></figure>

<h2 id="安装uWSGI和flask"><a href="#安装uWSGI和flask" class="headerlink" title="安装uWSGI和flask"></a>安装uWSGI和flask</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python3 -m pip install uwsgi</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo python3 -m pip install flask</span></pre></td></tr></table></figure>
<p>然后用flask自带的服务运行flask项目看，如果缺少模块就用pip补全<br>我的flask项目放在/home/www/my_flask下。</p>
<h3 id="配置uwsgi"><a href="#配置uwsgi" class="headerlink" title="配置uwsgi"></a>配置uwsgi</h3><p>进入到项目目录下新建uwsgi配置文件 config.ini</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">[<span class="string">uwsgi]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># uwsgi 启动时所使用的地址与端口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">socket </span>= <span class="string">127.</span>0.0.<span class="string">1:8001 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 指向网站目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">chdir </span>= /<span class="string">home/</span><span class="string">www/</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># python 启动程序文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">wsgi-file </span>= <span class="string">app.</span><span class="string">py </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># python 程序内用以启动的 application 变量名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">callable </span>= <span class="string">app </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 处理器数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">processes </span>= 4</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 线程数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">threads </span>= 2</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#状态检测地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">stats </span>= <span class="string">127.</span>0.0.<span class="string">1:9191</span></span></pre></td></tr></table></figure>
<p>运行uwsgi</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi config.ini</span></pre></td></tr></table></figure>
<p>没有报错的话就ok，但是现在如果关闭命令框的话uwsgi就又关闭了，所以用Supervisor<br>先安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install supervisor</span></pre></td></tr></table></figure>
<p>Supervisor全局配置文件位置 /etc/supervisor/supervisor.conf<br>我们不修改它的全局配置文件，在其/etc/supervisor/conf.d文件夹下添加自己的配置文件*.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:my_flask]</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 启动命令入口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">command</span>=/usr/<span class="built_in">local</span>/bin/uwsgi /home/www/my_flask/config.ini</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 命令程序所在目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">directory=/home/www/my_flask</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#运行命令的用户名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">user=eric</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">autostart=<span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">autorestart=<span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#日志地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">stdout_logfile=/home/www/my_flask/<span class="built_in">log</span>/uwsgi_supervisor.log</span></pre></td></tr></table></figure>

<p>启动和停止服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service supervisor start</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo service supervisor stop</span></pre></td></tr></table></figure>
<h2 id="安装和配置Nginx"><a href="#安装和配置Nginx" class="headerlink" title="安装和配置Nginx"></a>安装和配置Nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span></pre></td></tr></table></figure>
<p>进入/etc/nginx/site-available/,修改default</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      listen  80;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      server_name jzkdevos.cloudapp.net; <span class="comment">#公网地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">      location / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        include      uwsgi_params;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        uwsgi_pass   127.0.0.1:8001;  <span class="comment"># 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	uwsgi_send_timeout 3600;        <span class="comment"># 指定连接到后端uWSGI的超时时间。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        uwsgi_connect_timeout 3600;   <span class="comment"># 指定向uWSGI传送请求的超时时间，完成握手后向uWSGI传送请求的超时时间。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        uwsgi_read_timeout 3600;        <span class="comment"># 指定接收uWSGI应答的超时时间，完成握手后接收uWSGI应答的超时时间。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        uwsgi_param UWSGI_CHDIR  /home/eric/www/DataSite1.0; <span class="comment"># 指向网站根目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        uwsgi_param UWSGI_SCRIPT app:app; <span class="comment"># 指定启动程序</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>
<p>因为自己的小程序跑的程序时间较长，所以这里吧请求时间设的稍微长了点，然后重启nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nginx restart</span></pre></td></tr></table></figure>

<p>然后就基本搞定了</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux + Nginx + PHP + MySQL</title>
    <url>/github.io/2017/06/09/Linux%20+%20Nginx%20+%20PHP%20+%20MySQL/</url>
    <content><![CDATA[<h1 id="Linux-Nginx-PHP-MySQL环境搭建及部署"><a href="#Linux-Nginx-PHP-MySQL环境搭建及部署" class="headerlink" title="Linux + Nginx + PHP + MySQL环境搭建及部署"></a>Linux + Nginx + PHP + MySQL环境搭建及部署</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>最近由于某些原因需要这些环境搭建起俩个网站，在别人的帮助和自己的研究下终于OK了，这里记录下。</p>
</blockquote>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先我的系统是CentOS6.8的版本, 然后软件都是编译安装的，所以得先下载软件包，这里贴一下地址。<br><a href="http://nginx.org/download/nginx-1.10.3.tar.gz" target="_blank" rel="noopener">Nginx1.10.3</a><br><a href="http://dev.mysql.com/get/Downloads/MySQL-5.5/MySQL-server-5.5.30-1.el6.x86_64.rpm" target="_blank" rel="noopener">MySQL-server-5.5.30</a><br><a href="http://dev.mysql.com/get/Downloads/MySQL-5.5/MySQL-client-5.5.30-1.el6.x86_64.rpm" target="_blank" rel="noopener">MySQL-client-5.5.30</a><br><a href="http://dev.mysql.com/get/Downloads/MySQL-5.5/MySQL-devel-5.5.30-1.el6.x86_64.rpm" target="_blank" rel="noopener">MySQL-devel-5.5.30</a><br><a href="http://cn2.php.net/distributions/php-5.4.45.tar.gz" target="_blank" rel="noopener">php-5.4.45</a><br>先把这些东西下载下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c URL</span></pre></td></tr></table></figure>
<p>然后可以准备安装了，这里的安装顺序我个人建议是<strong>PHP最后再安装，Nginx和MySQL随意</strong>，我这里先安装MySQL。<br>##安装MySQL##<br>1、先检查是否安装过MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span></pre></td></tr></table></figure>
<p>2、如果有的话就删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -e mysql-xxx-xxx</span></pre></td></tr></table></figure>
<p>3、然后安装MySQL的rpm文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh MySQL-server-5.5.30-1.el6.x86_64.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh MySQL-client-5.5.30-1.el6.x86_64.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line">rpm -ivh MySQL-devel-5.5.30-1.el6.x86_64.rpm</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是ubuntu系统的话</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">apt-get install mysql-server-5.5 mysql-client-5.5 libmysqld-dev</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 5.5 或 5.7 都可以</span></span></pre></td></tr></table></figure>
<p>4、安装完成后一般先开启MySQL服务然后设置root密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mysql start</span></pre></td></tr><tr><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password <span class="string">'pw'</span></span></pre></td></tr></table></figure>
<p>5、添加MySQL账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to username @<span class="string">"%"</span> identified by <span class="string">"PW"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#*.*表示开发开发所以权限给username账户，指定特定数据库则为:db.*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#username则为用户名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#"%"为允许次账号远程连接，如果只允许本地的话则：@localhost</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">flush privileges;</span></pre></td></tr></table></figure>
<p>基本上MySQL安装就这样了。<br>##Nginx安装##<br>1、首先解压压缩包然后进入解压后的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf nginx-1.10.3.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.10.3</span></pre></td></tr></table></figure>
<p>2、在安装前需要安装一下依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install pcre-devel openssl openssl-devel</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#如果是ubuntu系的就</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">apt-get install libpcre3 libpcre3-dev libpcrecpp0 libssl-dev zlib1g-dev</span></pre></td></tr></table></figure>
<p>3、编辑configure文件和安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span></pre></td></tr></table></figure>
<p><img data-src="/github.io/imgs/nginx1.png" alt="Alt text"><br>如果没有提示出错就</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#如果是sudo个人建议分开执行make 和 make install</span></span></pre></td></tr></table></figure>
<p>如果出错了提示少依赖包就直接yum或apt-get<br>4、然后可以启动Nginx了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#停止/重新加载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop(quit、reload)</span></pre></td></tr></table></figure>
<p>测试的话等php装好了一起测了<br>##PHP安装##<br>1、和前面Nginx一样先解压再进入目录，这里就不贴命令了<br>2、编译和安装，这里需要注意下了，我装的PHP需要mysql，gd，pdo等一些库，所以这里编辑 configure文件需要一下with参数。这里先安装一些依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install gcc libxml2 libxml2-devel libmcrypt libmcrypt-devel mhash autoconf libXpm* freetype* libjpeg* libpng*</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是ubuntu的话</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">apt-get install libxml2 libxml2-dev libjpeg-turbo8-dev libpng-dev libfreetype6-dev libmcrypt-dev libreadline-dev</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#然后进入解压后php文件夹</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/etc --with-mcrypt --<span class="built_in">enable</span>-soap --<span class="built_in">enable</span>-gd-native-ttf --<span class="built_in">enable</span>-ftp --<span class="built_in">enable</span>-mbstring --<span class="built_in">enable</span>-exif --<span class="built_in">enable</span>-fpm --with-mysqli --with-mysql --with-pdo-mysql --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-zlib</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#如果不需要哪些库的话也可以不要后面的参数</span></span></pre></td></tr></table></figure>
<p>一样执行configure后没有出错就直接make 和 make install<br>3、配置文件<br>安装完后可能会确实配置文件，直接去安装文件夹里Copy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp ~/php-x.x.x/php.ini-production /usr/<span class="built_in">local</span>/php/lib/php.ini</span></pre></td></tr></table></figure>
<p>4、开启php-fpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/php/sbin/php-fpm</span></pre></td></tr></table></figure>
<p>如果启动失败可能是没有php-fpm配置文件，进入/usr/local/php/etc路径下，将php-fpm.conf.default改成php-fpm.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php/etc</span></pre></td></tr><tr><td class="code"><pre><span class="line">cp php-fpm.conf.default php-fpm.conf</span></pre></td></tr></table></figure>
<p>然后再开启php-fpm</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>翻越GFW（二）</title>
    <url>/github.io/2017/05/22/%E7%BF%BB%E8%B6%8AGFW%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Shadowsocks-Azure-VPS"><a href="#Shadowsocks-Azure-VPS" class="headerlink" title="Shadowsocks+Azure VPS"></a>Shadowsocks+Azure VPS</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>发现之前自己装的shadowsocks好像是多此一举，现在发现一个更简单的</p>
</blockquote>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>首先得有一个VPS，我这里用的是国际版的 <a href="https://portal.azure.com" target="_blank" rel="noopener">Azure</a>。其他的也行，反正能在外面建虚拟机就行。</p>
<p>然后在Azure上创建虚拟机，怎么创建我就不说了。我现在虚机版本是<strong>Ubuntu 16.04 LTS</strong></p>
<h2 id="进入正题配置"><a href="#进入正题配置" class="headerlink" title="进入正题配置"></a>进入正题配置</h2><p>Shadowsocks Python版本，其实完全可以直接看<a href="https://github.com/shadowsocks/shadowsocks/wiki" target="_blank" rel="noopener">官方文档</a>就OK了</p>
<h1 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo pip install shadowsocks</span></pre></td></tr></table></figure>

<h1 id="单用户配置文件"><a href="#单用户配置文件" class="headerlink" title="单用户配置文件"></a>单用户配置文件</h1><p>如果没有的话创建文件/etc/shadowsocks.json，配置格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"server_port"</span>:8388,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"password"</span>:<span class="string">"mypassword"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"timeout"</span>:300,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>, <span class="comment">#RC4-MD5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="多用户配置格式"><a href="#多用户配置格式" class="headerlink" title="多用户配置格式"></a>多用户配置格式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"server"</span>: <span class="string">"0.0.0.0"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"port_password"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"8381"</span>: <span class="string">"foobar1"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"8382"</span>: <span class="string">"foobar2"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"8383"</span>: <span class="string">"foobar3"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"8384"</span>: <span class="string">"foobar4"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"timeout"</span>: 300,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"method"</span>: <span class="string">"aes-256-cfb"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h1 id="运行停止"><a href="#运行停止" class="headerlink" title="运行停止"></a>运行停止</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks.json -d start</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo ssserver -c /etc/shadowsocks.json -d stop</span></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>是不是很简单暴力，客户端我就不说了</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>翻越GFW</title>
    <url>/github.io/2017/05/19/%E7%BF%BB%E8%B6%8AGFW/</url>
    <content><![CDATA[<h1 id="Shadowsocks-Azure-VPS"><a href="#Shadowsocks-Azure-VPS" class="headerlink" title="Shadowsocks+Azure VPS"></a>Shadowsocks+Azure VPS</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>百度越来越恶心了 完全查不到东西 所以研究了下怎么翻越GFW</p>
</blockquote>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>首先得有一个VPS，我这里用的是国际版的 <a href="https://portal.azure.com" target="_blank" rel="noopener">Azure</a>。其他的也行，反正能在外面建虚拟机就行。</p>
<p>然后在Azure上创建虚拟机，怎么创建我就不说了。我的虚机版本是<strong>Ubuntu 14.04.5 LTS</strong></p>
<h2 id="进入正题配置"><a href="#进入正题配置" class="headerlink" title="进入正题配置"></a>进入正题配置</h2><p>先给一个网站 Github上的shadowsocks-libev <a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-libev</a><br>其实项目readme里已经写的很清楚了，看下去无压力的完全可以无视我写的。</p>
<p><strong>其实shadowsocks-libev推荐的是Ubuntu 16.10版本或者更高的</strong><br>因为我的版本比较低所以执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt-get update</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo apt install shadowsocks-libev</span></pre></td></tr></table></figure>
<p>然后就应该是装完了，接下来修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/shadowsocks-libev/config.json</span></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>, #这里强烈建议<span class="number">4</span>个<span class="number">0</span>，我刚配的时候配的是服务器地址 后来一直连不上</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"server_port"</span>:<span class="number">1111</span>, #端口，这里如果是azure VPS的后面还需要配置以下</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"password"</span>:<span class="string">"password"</span>,#密码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"timeout"</span>:<span class="number">300</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"method"</span>:<span class="string">"rc4-md5"</span> #加密方式</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>配置完后保存 然后运行下面命令开始</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span></pre></td></tr></table></figure>
<p>如果提示没有ssserver命令，则运行一下下面的命令重新装一遍</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span></pre></td></tr><tr><td class="code"><pre><span class="line">pip install shadowsocks</span></pre></td></tr></table></figure>
<p>ok服务器端都配完了，然后再去azure给设置下开放刚才设置的端口<br><img data-src="/github.io/imgs/gfw.png" alt="Alt text"></p>
<h2 id="可能出的错"><a href="#可能出的错" class="headerlink" title="可能出的错"></a>可能出的错</h2><p>最后去PC端庄个shadowsocks的客户端配置下就可以试一下了，如果出现一下问题</p>
<ul>
<li><strong>客户端一直timeout</strong>：试一下换个常用的端口</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>强撸 Python（三）</title>
    <url>/github.io/2017/05/14/%E5%BC%BA%E6%92%B8%20Python%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Python的多态理解"><a href="#Python的多态理解" class="headerlink" title="Python的多态理解"></a>Python的多态理解</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>面向对象中有三大特性： 封装，继承和多态</p>
</blockquote>
<h2 id="静态语言的多态"><a href="#静态语言的多态" class="headerlink" title="静态语言的多态"></a>静态语言的多态</h2><p>我们先看2段代码，一段是静态语言Java。<br>在Java里放宽了讲其实有2中多态形势：</p>
<ul>
<li><strong>编译时多态（设计时多态）</strong>：方法重载，方法名称相同，参数个数、次序、类型不同，返回值也可以不同</li>
<li><strong>运行时多态（后绑定）</strong>：我们讲的主要是这种<br>Java里多态的存在要有三个前提：</li>
</ul>
<p><strong>1.要有继承关系</strong><br><strong>2.子类要重写父类方法</strong><br><strong>3.父类引用指向子类对象</strong><br>从下面代码的运行结果可以看出，只有非静态的成员方法才能实现后绑定的效果，<strong>静态方法和成员变量都不会出现后绑定</strong><br>我们下面再对比下Python的多态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> String name = <span class="string">"People"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String Value = <span class="string">"People's Value"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"People Run"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">look</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"People Look"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> String name = <span class="string">"Chinese People"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String Value = <span class="string">"Chinese People's Value"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Chinese People Run"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">look</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"Chinese People Look"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        People p = <span class="keyword">new</span> Chinese();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(p.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(p.Value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p.look();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">输出结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">People</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">People's Value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">Chinese People Run</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">People Look</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">**/</span></span></pre></td></tr></table></figure>
<h2 id="Python动态"><a href="#Python动态" class="headerlink" title="Python动态"></a>Python动态</h2><p>首先Python是一门动态语言<br>Python有个概念是一切皆对象，他的多态不需要像Java一样要满足三个前提，它本身就具备多态的属性。<br>下面代码里的output函数里的arg参数对于output函数来说我不用管你是什么类型的，我只把你当做是一个对象，我调用的是你传进来对象里的方法。所以这里参数可以穿int，str等等，这里就直接体现出python的多态特性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">o1</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.a = <span class="string">"o1's a"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">"o1's f"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">o2</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.a = <span class="string">"o2's a"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">"o2's f"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(arg)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    arg.f()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(arg.a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">output(o1())</span></pre></td></tr><tr><td class="code"><pre><span class="line">output(o2())</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">运行结果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">o1's f</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">o1's a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">o2's f</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">o2's a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>强撸 Python（二）</title>
    <url>/github.io/2017/05/08/%E5%BC%BA%E6%92%B8%20Python%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Python文件操作"><a href="#Python文件操作" class="headerlink" title="Python文件操作"></a>Python文件操作</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>读写文件是最常用的IO操作了，我们看下Python是怎么读写的</p>
</blockquote>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>首先从最简单的打开关闭文件来看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'C:\\test.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">f.close()	<span class="comment">#注意文件打开操作完后一定要关闭</span></span></pre></td></tr></table></figure>
<p>打开文件直接用open()函数，python3直接用open就行，python2里还有file函数，现在已经去掉了，看一下参数：文件路径就不说了，’r’:表示用只读模式打开，还有一个编码设定，如果不写r和编码，默认情况下已只读模式打开文件。<br>python下基本的文件打开类型<br>| 关键字      |    说明 |<br>| :——–  | ——–:|<br>| r           | 只读模式【默认;不存在报错】 |<br>| w             | 只写模式【不可读；不存在则创建；存在则清空内容】 |<br>| x           | 只写模式【不可读；不存在则创建，存在则报错】|<br>| a          | 追加模式【可读；不存在则创建；存在则只追加内容】|</p>
<h2 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(FilePath, <span class="string">'r+'</span>, encoding=<span class="string">'utf-8'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">data = f.read()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(type(data),data)	<span class="comment">#默认类型为str</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">f.close()</span></pre></td></tr></table></figure>
<p>最简单的数据读取，但是直接读取的是文件的全部数据，如果文件太大内存不够会造成报错，所以这里建议按行读取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	data = line</span></pre></td></tr></table></figure>
<p>当我们想读取图片，视频怎么办呢，将打开模式加上一个b，就是已字节模式打开文件<br>带b都是以字节的方式打开文件<br>rb  或 r+b<br>wb 或 w+b<br>xb 或 w+b<br>ab 或 a+b</p>
<h2 id="文件关闭"><a href="#文件关闭" class="headerlink" title="文件关闭"></a>文件关闭</h2><p>文件关闭都知道file.close(),但是每次打开都要close很麻烦，于是python有个语法可以自动帮你关闭文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">whit open(FilePath, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	data = f.read()</span></pre></td></tr></table></figure>
<p>用with as语句打开文件python会自动关闭文件就不需要我们自己close了<br>在python3里with as支持打开多个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#同时打开2个文件copy</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'SourceFile'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file1, open(<span class="string">'NewFile'</span>,<span class="string">'w'</span>)<span class="keyword">as</span> file2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        file2.write(line)</span></pre></td></tr></table></figure>
<p>文件里还有一些指针的知识看一下函数就知道了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Flush and close this stream.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileno</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Return the underlying file descriptor (an integer) of the stream if</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    it exists.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flush</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Flush the write buffers of the stream if applicable.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isatty</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Return True if the stream is interactive (i.e., connected to a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    terminal/tty device).</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: bool</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readable</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Return True if the stream can be read from.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: bool</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readline</span><span class="params">(self, limit=<span class="number">-1</span>)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Read and return one line from the stream.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type limit: numbers.Integral</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: unicode</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readlines</span><span class="params">(self, hint=<span class="number">-1</span>)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Read and return a list of lines from the stream.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type hint: numbers.Integral</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: list[unicode]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> []</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seek</span><span class="params">(self, offset, whence=io.SEEK_SET)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Change the stream position to the given byte offset.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type offset: numbers.Integral</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type whence: numbers.Integral</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seekable</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Return True if the stream supports random access.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: bool</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Return the current stream position.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">truncate</span><span class="params">(self, size=None)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Resize the stream to the given size in bytes (or the current</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    position if size is not specified).</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type size: numbers.Integral | None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writable</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Return True if the stream supports writing.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: bool</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writelines</span><span class="params">(self, lines)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Write a list of lines to the stream.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type lines: collections.Iterable[unicode]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.version_info &gt;= (<span class="number">2</span>, <span class="number">7</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detach</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"""Separate the underlying raw stream from the buffer and return</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        it.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :rtype: None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">pass</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self, n=None)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Read and return at most n characters from the stream as a single</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    unicode.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type n: numbers.Integral | None</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: unicode</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, s)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Write the unicode string s to the stream and return the number of</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    characters written.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :type b: unicode</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :rtype: int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>强撸 Python（一）</title>
    <url>/github.io/2017/05/06/%E5%BC%BA%E6%92%B8%20Python%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Python（一）"><a href="#Python（一）" class="headerlink" title="Python（一）"></a>Python（一）</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>没啥背景就是想强行撸一波Python</p>
</blockquote>
<h2 id="Python的基础类型"><a href="#Python的基础类型" class="headerlink" title="Python的基础类型"></a>Python的基础类型</h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="right">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="left">数字</td>
<td align="right">int</td>
</tr>
<tr>
<td align="left">字符串</td>
<td align="right">str</td>
</tr>
<tr>
<td align="left">布尔值</td>
<td align="right">bool</td>
</tr>
<tr>
<td align="left">列表</td>
<td align="right">list</td>
</tr>
<tr>
<td align="left">元组</td>
<td align="right">tuple</td>
</tr>
<tr>
<td align="left">字典</td>
<td align="right">dict</td>
</tr>
<tr>
<td align="left">集合</td>
<td align="right">set</td>
</tr>
</tbody></table>
<h2 id="基础类型里相对重要的函数"><a href="#基础类型里相对重要的函数" class="headerlink" title="基础类型里相对重要的函数"></a>基础类型里相对重要的函数</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Python源码，表示获取某个数2进制的最短位数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bit_length</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        int.bit_length() -&gt; int</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        Number of bits necessary to represent self in binary.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &gt;&gt;&gt; bin(37)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        '0b100101'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &gt;&gt;&gt; (37).bit_length()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        6</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span></pre></td></tr></table></figure>
<p>python int的优化机制（-5<del>257）<br>在-5</del>257之间的数，如果使用赋值方式，那么他们依然属于同一块内存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">a2 = <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#那么a1和a2共享同一块内存，如果大于257那么就不同了</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#但是当a1,a2在同一个py模块文件，在同一个模块内，不管值多大，相同的常量对象只分配一个存储单元</span></span></pre></td></tr></table></figure>
<h3 id="str"><a href="#str" class="headerlink" title="str"></a>str</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">join</span><span class="params">(self, iterable)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        S.join(iterable) -&gt; unicode</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        Return a string which is the concatenation of the strings in the</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        iterable.  The separator between elements is S.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">u""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#Example</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">li = [<span class="string">'big'</span>, <span class="string">'xy'</span>, <span class="string">'what'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">s = <span class="string">'_'</span>.join(li)	<span class="comment"># s = big_xy_what</span></span></pre></td></tr></table></figure>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="number">1</span> <span class="keyword">if</span> <span class="number">1</span>!=<span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#Name变量</span></span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux杂记</title>
    <url>/github.io/2017/04/25/Linux%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="随手记一些不熟的命令"><a href="#随手记一些不熟的命令" class="headerlink" title="随手记一些不熟的命令"></a>随手记一些不熟的命令</h1><p>[命令|Ubuntu]</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>主要是平时在操作Ubuntu系统时会遇到不熟的命令就随手记下了，已备往后方便回头查找。</p>
</blockquote>
<h2 id="主要命令行"><a href="#主要命令行" class="headerlink" title="主要命令行"></a>主要命令行</h2><p>虽然各种命令都可以用man查询到，但是比较常用的还是随手写下吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -h	<span class="comment"># -h human-readable print human readable sizes 可打印文件大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">touch .fileName <span class="comment">#带.的是隐藏文件，创建隐藏文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">mkdir -p <span class="comment">#递归创建</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">find / -name *xxx*	<span class="comment">#模糊查询</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">find / -size +10M |xargs ls -hl	<span class="comment">#管道符，前面的结果作为后面命令的参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">df -h	<span class="comment">#查询磁盘</span></span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基本命令说明</title>
    <url>/github.io/2017/04/10/hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="基本命令说明"><a href="#基本命令说明" class="headerlink" title="基本命令说明"></a>基本命令说明</h2><h3 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g：hexo generate</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ hexo c: hexo clean</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ hexo s: hexo server</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ hexo d: hexo deploy</span></pre></td></tr></table></figure>



<h3 id="hexo命令组合"><a href="#hexo命令组合" class="headerlink" title="hexo命令组合"></a>hexo命令组合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g -s <span class="comment">#就是清除、生成、启动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g -d <span class="comment">#就是清除、生成、部署</span></span></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>说明</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/github.io/2017/04/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>说明</category>
      </categories>
  </entry>
</search>
